<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RSpec</title>
  <subtitle>The Official RSpec Blog</subtitle>
  <id>http://rspec.info/blog</id>
  <link href="http://rspec.info/blog"/>
  <link href="http://rspec.info/blog/feed.xml" rel="self"/>
  <updated>2017-09-10T17:00:00-07:00</updated>
  <author>
    <name>The RSpec Core Team</name>
  </author>
  <entry>
    <title>Effective Testing with RSpec 3 has been released!</title>
    <link rel="alternate" href="http://rspec.info/blog/2017/09/effective-testing-with-rspec-3-released/"/>
    <id>http://rspec.info/blog/2017/09/effective-testing-with-rspec-3-released/</id>
    <published>2017-09-10T17:00:00-07:00</published>
    <updated>2017-09-10T20:33:06-07:00</updated>
    <author>
      <name>Myron Marston</name>
    </author>
    <content type="html">&lt;p&gt;As we &lt;a href="/blog/2017/02/now-in-beta-effective-testing-with-rspec-3/"&gt;announced back in February&lt;/a&gt;,
Ian Dees and I have written a new book for the Pragmatic Bookshelf
about RSpec, entitled &lt;em&gt;Effective Testing with RSpec 3: Build Ruby Apps with Confidence&lt;/em&gt;.
We're happy to announce that the book is out of beta and is now shipping from
&lt;a href="https://pragprog.com/book/rspec3/effective-testing-with-rspec-3"&gt;pragprog.com&lt;/a&gt; and
&lt;a href="https://www.amazon.com/Effective-Testing-RSpec-Build-Confidence/dp/1680501984/"&gt;amazon.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="The book has shipped!" title="Our book has shipped!" src="/images/blog/physical-book.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;We put a ton of work over the last three years into this project, distilling our
combined 20 years of testing experience into a book that explains how to do
TDD/BDD well using RSpec. We believe that anyone who wants to learn RSpec or
that regularly uses RSpec will benefit from the book. The early reviews from
our readers have been quite positive. Avdi Grimm, author of &lt;em&gt;Confident Ruby&lt;/em&gt; and
&lt;em&gt;Exceptional Ruby&lt;/em&gt; and Head Chef of &lt;a href="https://www.rubytapas.com/"&gt;RubyTapas&lt;/a&gt;, has this
to say about the book:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ruby embraces the old Lisp idea that you should “build up a language” to address your problem,
and RSpec carries this approach into the world of testing. But RSpec is a big toolbox, and in
order to harness its full power you need a guide. This is that guide: the bridge you need to
take you from writing tests, to expressing your design requirements in code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to learn more about the book, check out this video Ian put together about it:&lt;/p&gt;

&lt;iframe class="centered" width="560" height="315" src="https://www.youtube.com/embed/-EbelD3CxAI" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;

&lt;p&gt;You can also
&lt;a href="https://media.pragprog.com/titles/rspec3/intro.pdf"&gt;check&lt;/a&gt;
&lt;a href="https://media.pragprog.com/titles/rspec3/writing.pdf"&gt;out&lt;/a&gt;
&lt;a href="https://media.pragprog.com/titles/rspec3/testing.pdf"&gt;multiple&lt;/a&gt;
&lt;a href="https://media.pragprog.com/titles/rspec3/origins.pdf"&gt;extracts&lt;/a&gt;
from the book to get an idea of what it's like.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>RSpec 3.6 has been released!</title>
    <link rel="alternate" href="http://rspec.info/blog/2017/05/rspec-3-6-has-been-released/"/>
    <id>http://rspec.info/blog/2017/05/rspec-3-6-has-been-released/</id>
    <published>2017-05-03T17:00:00-07:00</published>
    <updated>2017-09-09T21:41:52-07:00</updated>
    <author>
      <name>Sam Phippen, Myron Marston, Jon Rowe</name>
    </author>
    <content type="html">&lt;p&gt;RSpec 3.6 has just been released! Given our commitment to
&lt;a href="http://semver.org/"&gt;semantic versioning&lt;/a&gt;, this should be an easy
upgrade for anyone already using RSpec 3, but if we did introduce
any regressions, please let us know, and we'll get a patch release
out with a fix ASAP.&lt;/p&gt;

&lt;p&gt;RSpec continues to be a community-driven project with contributors
from all over the world. This release includes over 450 commits and 120
merged pull requests from 50 different contributors!&lt;/p&gt;

&lt;p&gt;Thank you to everyone who helped make this release happen!&lt;/p&gt;

&lt;h2 id="notable-changes"&gt;Notable Changes&lt;/h2&gt;

&lt;h3 id="core-errors-outside-examples-now-handled-and-formatted-well"&gt;Core: Errors outside examples now handled and formatted well&lt;/h3&gt;

&lt;p&gt;In previous versions of RSpec, we allowed errors encountered while loading spec
files or running &lt;code&gt;:suite&lt;/code&gt; hooks to crash the ruby interpreter, giving you its
default full-stacktrace output.  In RSpec 3.6, we now handle all errors that
occur outside examples, and format them nicely including a filtered backtrace
and a code snippet for the site of the error.  For example, an error in a
&lt;code&gt;before(:suite)&lt;/code&gt; hook is now formatted like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Errors outside example execution" src="/images/blog/errors_outside_example.png" /&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Jon Rowe for assisting with this feature.&lt;/p&gt;

&lt;h3 id="core-output-coloring-is-set-automatically-if-rspec-is-outputting-to-a-tty"&gt;Core: Output coloring is set automatically if RSpec is outputting to a tty.&lt;/h3&gt;

&lt;p&gt;In past versions of RSpec, you were required to specify &lt;code&gt;--color&lt;/code&gt; if you wanted
output coloring, regardless of whether you were outputting to a terminal, a
file, a CI system, or some other output location. Now, RSpec will automatically
color output if it detects it is running in a TTY. You can still force coloring
with &lt;code&gt;--color&lt;/code&gt;, or if you are running in a TTY and explicitly do not want color,
you can specify &lt;code&gt;--no-color&lt;/code&gt; to disable this behavior.&lt;/p&gt;

&lt;p&gt;We thank Josh Justice for adding this behavior to RSpec.&lt;/p&gt;

&lt;h3 id="core-configfailifnoexamples"&gt;Core: &lt;code&gt;config.fail_if_no_examples&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;As it currently stands RSpec will exit with code &lt;code&gt;0&lt;/code&gt; indicating success if no
examples are defined. This option allows you to configure RSpec to exit with
code &lt;code&gt;1&lt;/code&gt; indicating failure. This is useful in CI environments, as it helps
detect when you've misconfigured RSpec to look for specs in the wrong place or
with the wrong pattern. When no specs are found and &lt;code&gt;config.fail_if_no_examples&lt;/code&gt;
is set we consider this to be an error as opposed to passing the suite run.&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fail_if_no_examples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A special thanks to Ewa Czechowska for getting this in to core.&lt;/p&gt;

&lt;h3 id="expectations-improved-failure-messages-for-the-change-and-satisfy-matchers"&gt;Expectations: Improved failure messages for the &lt;code&gt;change&lt;/code&gt; and &lt;code&gt;satisfy&lt;/code&gt; matchers&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;change&lt;/code&gt; and &lt;code&gt;satisfy&lt;/code&gt; matchers both accept a block. For the
&lt;code&gt;change&lt;/code&gt; matcher, you use this to specify &lt;em&gt;what&lt;/em&gt; you expect to change.
For the &lt;code&gt;satisfy&lt;/code&gt; matcher you use a block to specify your pass/fail
criteria.  In either case, the failure message has always been pretty
generic.  For example, consider these specs:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;"`change` and `satisfy` matchers"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="s2"&gt;"`change` matcher"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="s2"&gt;"`satisfy` matcher"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;satisfy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;odd?&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt; &lt;span class="n"&gt;satisfy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;positive?&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prior versions of RSpec would fail with messages like
"expected result to have changed by 1, but was changed by 2"
and "expected 2 to satisfy block".  In both cases, the failure
message is accurate, but does not help you distinguish &lt;em&gt;which&lt;/em&gt;
&lt;code&gt;change&lt;/code&gt; or &lt;code&gt;satisfy&lt;/code&gt; matcher failed.&lt;/p&gt;

&lt;p&gt;Here's what the failure output looks like on RSpec 3.6:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Failures:

  1) `change` and `satisfy` matchers `change` matcher
     Failure/Error:
       expect {
         a += 1
         b += 2
       }.to change { a }.by(1)
       .and change { b }.by(1)

       expected `b` to have changed by 1, but was changed by 2
     # ./spec/example_spec.rb:5:in `block (2 levels) in &amp;lt;top (required)&amp;gt;'

  2) `change` and `satisfy` matchers `satisfy` matcher
     Failure/Error:
       expect(2).to satisfy { |x| x.odd? }
               .and satisfy { |x| x.positive? }

       expected 2 to satisfy expression `x.odd?`
     # ./spec/example_spec.rb:13:in `block (2 levels) in &amp;lt;top (required)&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to the great work of Yuji Nakayama, RSpec now uses
&lt;a href="http://ruby-doc.org/stdlib-2.4.0/libdoc/ripper/rdoc/Ripper.html"&gt;Ripper&lt;/a&gt;
to extract a snippet to include in the failure message. If we're not
able to extract a simple, single-line snippet, we fall back to the older
generic messages.&lt;/p&gt;

&lt;h3 id="expectations-scoped-aliased-and-negated-matchers"&gt;Expectations: Scoped aliased and negated matchers&lt;/h3&gt;

&lt;p&gt;In RSpec 3, we added &lt;code&gt;alias_matcher&lt;/code&gt;, allowing users to
&lt;a href="http://rspec.info/blog/2014/01/new-in-rspec-3-composable-matchers/#matcher-aliases"&gt;alias matchers&lt;/a&gt;
for better readability. In 3.1 we added the ability to define
&lt;a href="http://rspec.info/blog/2014/09/rspec-3-1-has-been-released/#expectations-new-definenegatedmatcher-api"&gt;negated matchers&lt;/a&gt;
with the &lt;code&gt;define_negated_matcher&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Before RSpec 3.6 when you called either of these methods the newly defined
matchers were always defined at the global scope. With this feature you are able
to invoke either &lt;code&gt;alias_matcher&lt;/code&gt; or &lt;code&gt;define_negated_matcher&lt;/code&gt; in the scope of an
example group (&lt;code&gt;describe&lt;/code&gt;, &lt;code&gt;context&lt;/code&gt;, etc). When doing so the newly defined
matcher will only be available to examples in that example group and any nested
groups:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'scoped matcher aliases'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'example group with a matcher alias'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;alias_matcher&lt;/span&gt; &lt;span class="ss"&gt;:be_a_string_starting_with&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:start_with&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'can use the matcher alias'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_a_string_starting_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'example group without the matcher alias'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'cannot use the matcher alias'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="c1"&gt;# fails because the matcher alias is not available&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_a_string_starting_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to Markus Reiter for contributing this feature.&lt;/p&gt;

&lt;h3 id="mocks-withoutpartialdoubleverification"&gt;Mocks: &lt;code&gt;without_partial_double_verification&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;When we released RSpec 3.0 we added &lt;a href="http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#verifying-doubles"&gt;verifying doubles&lt;/a&gt;.
Verifying doubles allow you to ensure that stubs and mocks that you create with
RSpec correctly emulate the interfaces on the objects in your tests.
&lt;code&gt;without_partial_double_verification&lt;/code&gt; allows you to turn off the verifying
double behaviour for the duration of the execution of a block. For example:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Widget&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;takes_an_arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Widget&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'can be stub with a mismatched arg count'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;without_partial_double_verification&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Widget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
      &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:call&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, this test would fail if the &lt;code&gt;without_partial_double_verification&lt;/code&gt; call was
not made, because we are stubbing the &lt;code&gt;call&lt;/code&gt; method on the &lt;code&gt;Widget&lt;/code&gt; object with
an argument count that is different from the implementation. We added this feature
specifically to address a problem with partial double verification when stubbing
locals in views. Details can be found in &lt;a href="https://github.com/rspec/rspec-mocks/issues/1102"&gt;this issue&lt;/a&gt;
and the rspec-rails issues linked from it.&lt;/p&gt;

&lt;p&gt;A special thanks to Jon Rowe for adding this feature.&lt;/p&gt;

&lt;h3 id="rails-support-for-rails-51"&gt;Rails: Support for Rails 5.1:&lt;/h3&gt;

&lt;p&gt;RSpec 3.6.0 comes with full support for Rails 5.1. There are no major changes to
the rails 5.1 API and so this upgrade should be fully smooth. Simply bumping to
the latest version of RSpec will bring the support to your app with no other
changes required on your part.&lt;/p&gt;

&lt;p&gt;Rails &lt;a href="http://weblog.rubyonrails.org/2017/4/27/Rails-5-1-final/"&gt;system tests&lt;/a&gt; are not yet supported,
but we plan to add support for them in the near future.&lt;/p&gt;

&lt;h2 id="stats"&gt;Stats:&lt;/h2&gt;

&lt;h3 id="combined"&gt;Combined:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 493&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 127&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;58 contributors&lt;/strong&gt;: Alessandro Berardi, Alex Coomans, Alex DeLaPena, Alyssa Ross, Andy Morris, Anthony Dmitriyev, Ben Pickles, Benjamin Quorning, Damian Simon Peter, David Grayson, Devon Estes, Dillon Welch, Eugene Kenny, Ewa Czechowska, Gaurish Sharma, Glauco Custódio, Hanumakanth, Hun Jae Lee, Ilya Lavrov, Isaac Betesh, John Meehan, Jon Jensen, Jon Moss, Jon Rowe, Josh Justice, Juanito Fatas, Jun Aruga, Kevin Glowacz, Koichi ITO, Krzysztof Zych, Luke Rollans, Luís Costa, Mark Campbell, Markus Reiter, Markus Schwed, Megan O'Neill, Mike Butsko, Mitsutaka Mimura, Myron Marston, Olle Jonsson, Phil Thompson, Sam Phippen, Samuel Giddins, Samuel Lourenço, Sasha Gerrand, Sophie Déziel, Travis Spangle, VTJamie, Wojciech Wnętrzak, Xavier Shay, Yuji Nakayama, ansonK, bootstraponline, gajewsky, matrinox, mrageh, proby, yui-knk&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-core"&gt;rspec-core:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 201&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 59&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;25 contributors&lt;/strong&gt;: Alyssa Ross, Benjamin Quorning, David Grayson, Devon Estes, Eugene Kenny, Ewa Czechowska, Ilya Lavrov, Jon Jensen, Jon Rowe, Josh Justice, Juanito Fatas, Jun Aruga, Mark Campbell, Mitsutaka Mimura, Myron Marston, Phil Thompson, Sam Phippen, Samuel Lourenço, Travis Spangle, VTJamie, Xavier Shay, Yuji Nakayama, bootstraponline, matrinox, yui-knk&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-expectations"&gt;rspec-expectations:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 85&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 25&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;11 contributors&lt;/strong&gt;: Alex DeLaPena, Alyssa Ross, Gaurish Sharma, Jon Rowe, Koichi ITO, Markus Reiter, Myron Marston, Sam Phippen, Xavier Shay, Yuji Nakayama, gajewsky&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-mocks"&gt;rspec-mocks:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 68&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 17&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;13 contributors&lt;/strong&gt;: Alessandro Berardi, Alex DeLaPena, Dillon Welch, Glauco Custódio, Jon Rowe, Luís Costa, Myron Marston, Olle Jonsson, Sam Phippen, Samuel Giddins, Yuji Nakayama, mrageh, proby&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-rails"&gt;rspec-rails:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 84&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 13&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;25 contributors&lt;/strong&gt;: Andy Morris, Anthony Dmitriyev, Ben Pickles, Damian Simon Peter, Hanumakanth, Hun Jae Lee, Isaac Betesh, John Meehan, Jon Moss, Jon Rowe, Josh Justice, Kevin Glowacz, Krzysztof Zych, Luke Rollans, Markus Schwed, Megan O'Neill, Mike Butsko, Myron Marston, Sam Phippen, Sasha Gerrand, Sophie Déziel, Wojciech Wnętrzak, Xavier Shay, Yuji Nakayama, yui-knk&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-support"&gt;rspec-support:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 55&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 13&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;7 contributors&lt;/strong&gt;: Alex Coomans, Jon Rowe, Myron Marston, Olle Jonsson, Sam Phippen, Yuji Nakayama, ansonK&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="docs"&gt;Docs&lt;/h2&gt;

&lt;h3 id="api-docs"&gt;API Docs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="/documentation/3.6/rspec-core/"&gt;rspec-core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="/documentation/3.6/rspec-expectations/"&gt;rspec-expectations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="/documentation/3.6/rspec-mocks/"&gt;rspec-mocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="/documentation/3.6/rspec-rails/"&gt;rspec-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="cucumber-features"&gt;Cucumber Features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://relishapp.com/rspec/rspec-core"&gt;rspec-core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://relishapp.com/rspec/rspec-expectations"&gt;rspec-expectations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://relishapp.com/rspec/rspec-mocks"&gt;rspec-mocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://relishapp.com/rspec/rspec-rails"&gt;rspec-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="release-notes"&gt;Release Notes&lt;/h2&gt;

&lt;h3 id="rspec-core-combining-all-betas-of-rspec-360"&gt;RSpec Core (combining all betas of RSpec 3.6.0)&lt;/h3&gt;

&lt;h4 id="section"&gt;3.6.0 / 2017-05-04&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-core/compare/v3.6.0.beta2...v3.6.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add seed information to JSON formatter output. (#2388, Mitsutaka Mimura)&lt;/li&gt;
  &lt;li&gt;Include example id in the JSON formatter output. (#2369, Xavier Shay)&lt;/li&gt;
  &lt;li&gt;Respect changes to &lt;code&gt;config.output_stream&lt;/code&gt; after formatters have been
setup. (#2401, #2419, Ilya Lavrov)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Delay formatter loading until the last minute to allow accessing the reporter
without triggering formatter setup. (Jon Rowe, #2243)&lt;/li&gt;
  &lt;li&gt;Ensure context hook failures running before an example can access the
reporter. (Jon Jensen, #2387)&lt;/li&gt;
  &lt;li&gt;Multiple fixes to allow using the runner multiple times within the same
process: &lt;code&gt;RSpec.clear_examples&lt;/code&gt; resets the formatter and no longer clears
shared examples, and streams can be used across multiple runs rather than
being closed after the first. (#2368, Xavier Shay)&lt;/li&gt;
  &lt;li&gt;Prevent unexpected &lt;code&gt;example_group_finished&lt;/code&gt; notifications causing an error.
(#2396, VTJamie)&lt;/li&gt;
  &lt;li&gt;Fix bugs where &lt;code&gt;config.when_first_matching_example_defined&lt;/code&gt; hooks would fire
multiple times in some cases. (Yuji Nakayama, #2400)&lt;/li&gt;
  &lt;li&gt;Default &lt;code&gt;last_run_status&lt;/code&gt; to "unknown" when the &lt;code&gt;status&lt;/code&gt; field in the
persistence file contains an unrecognized value. (#2360, matrinox)&lt;/li&gt;
  &lt;li&gt;Prevent &lt;code&gt;let&lt;/code&gt; from defining an &lt;code&gt;initialize&lt;/code&gt; method. (#2414, Jon Rowe)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta2--2016-12-12"&gt;3.6.0.beta2 / 2016-12-12&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-core/compare/v3.6.0.beta1...v3.6.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Include count of errors occurring outside examples in default summaries.
(#2351, Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Warn when including shared example groups recursively. (#2356, Jon Rowe)&lt;/li&gt;
  &lt;li&gt;Improve failure snippet syntax highlighting with CodeRay to highlight
RSpec "keywords" like &lt;code&gt;expect&lt;/code&gt;. (#2358, Myron Marston)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta1--2016-10-09"&gt;3.6.0.beta1 / 2016-10-09&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-core/compare/v3.5.4...v3.6.0.beta1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Warn when duplicate shared examples definitions are loaded due to being
defined in files matching the spec pattern (e.g. &lt;code&gt;_spec.rb&lt;/code&gt;) (#2278, Devon Estes)&lt;/li&gt;
  &lt;li&gt;Improve metadata filtering so that it can match against any object
that implements &lt;code&gt;===&lt;/code&gt; instead of treating regular expressions as
special. (Myron Marston, #2294)&lt;/li&gt;
  &lt;li&gt;Improve &lt;code&gt;rspec -v&lt;/code&gt; so that it prints out the versions of each part of
RSpec to prevent confusion. (Myron Marston, #2304)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;config.fail_if_no_examples&lt;/code&gt; option which causes RSpec to fail if
no examples are found. (Ewa Czechowska, #2302)&lt;/li&gt;
  &lt;li&gt;Nicely format errors encountered while loading spec files.
(Myron Marston, #2323)&lt;/li&gt;
  &lt;li&gt;Improve the API for enabling and disabling color output (Josh
Justice, #2321):
    &lt;ul&gt;
      &lt;li&gt;Automatically enable color if the output is a TTY, since color is
nearly always desirable if the output can handle it.&lt;/li&gt;
      &lt;li&gt;Introduce new CLI flag to force color on (&lt;code&gt;--force-color&lt;/code&gt;), even
if the output is not a TTY. &lt;code&gt;--no-color&lt;/code&gt; continues to work as well.&lt;/li&gt;
      &lt;li&gt;Introduce &lt;code&gt;config.color_mode&lt;/code&gt; for configuring the color from Ruby.
&lt;code&gt;:automatic&lt;/code&gt; is the default and will produce color if the output is
a TTY. &lt;code&gt;:on&lt;/code&gt; forces it on and &lt;code&gt;:off&lt;/code&gt; forces it off.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-expectations-combining-all-betas-of-rspec-360"&gt;RSpec Expectations (combining all betas of RSpec 3.6.0)&lt;/h3&gt;

&lt;h4 id="section-1"&gt;3.6.0 / 2017-05-04&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-expectations/compare/v3.6.0.beta2...v3.6.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Treat NoMethodError as a failure for comparison matchers. (Jon Rowe, #972)&lt;/li&gt;
  &lt;li&gt;Allow for scoped aliased and negated matchers–just call
&lt;code&gt;alias_matcher&lt;/code&gt; or &lt;code&gt;define_negated_matcher&lt;/code&gt; from within an example
group. (Markus Reiter, #974)&lt;/li&gt;
  &lt;li&gt;Improve failure message of &lt;code&gt;change&lt;/code&gt; matcher with block and &lt;code&gt;satisfy&lt;/code&gt; matcher
by including the block snippet instead of just describing it as &lt;code&gt;result&lt;/code&gt; or
&lt;code&gt;block&lt;/code&gt; when Ripper is available. (Yuji Nakayama, #987)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix &lt;code&gt;yield_with_args&lt;/code&gt; and &lt;code&gt;yield_successive_args&lt;/code&gt; matchers so that
they compare expected to actual args at the time the args are yielded
instead of at the end, in case the method that is yielding mutates the
arguments after yielding. (Alyssa Ross, #965)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta2--2016-12-12-1"&gt;3.6.0.beta2 / 2016-12-12&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-expectations/compare/v3.6.0.beta1...v3.6.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using the exist matcher on &lt;code&gt;File&lt;/code&gt; no longer produces a deprecation warning.
(Jon Rowe, #954)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta1--2016-10-09-1"&gt;3.6.0.beta1 / 2016-10-09&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-expectations/compare/v3.5.0...v3.6.0.beta1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix &lt;code&gt;contain_exactly&lt;/code&gt; to work correctly with ranges. (Myron Marston, #940)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;change&lt;/code&gt; to work correctly with sets. (Marcin Gajewski, #939)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-mocks-combining-all-betas-of-rspec-360"&gt;RSpec Mocks (combining all betas of RSpec 3.6.0)&lt;/h3&gt;

&lt;h4 id="section-2"&gt;3.6.0 / 2017-05-04&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-mocks/compare/v3.6.0.beta2...v3.6.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix "instance variable @color not initialized" warning when using
rspec-mocks without rspec-core. (Myron Marston, #1142)&lt;/li&gt;
  &lt;li&gt;Restore aliased module methods properly when stubbing on 1.8.7.
(Samuel Giddins, #1144)&lt;/li&gt;
  &lt;li&gt;Allow a message chain expectation to be constrained by argument(s).
(Jon Rowe, #1156)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta2--2016-12-12-2"&gt;3.6.0.beta2 / 2016-12-12&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-mocks/compare/v3.6.0.beta1...v3.6.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add new &lt;code&gt;without_partial_double_verification { }&lt;/code&gt; API that lets you
temporarily turn off partial double verification for an example.
(Jon Rowe, #1104)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta1--2016-10-09-2"&gt;3.6.0.beta1 / 2016-10-09&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-mocks/compare/v3.5.0...v3.6.0.beta1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Return the test double instance form &lt;code&gt;#freeze&lt;/code&gt; (Alessandro Berardi, #1109)&lt;/li&gt;
  &lt;li&gt;Allow the special logic for stubbing &lt;code&gt;new&lt;/code&gt; to work when &lt;code&gt;&amp;lt;Class&amp;gt;.method&lt;/code&gt; has
been redefined. (Proby, #1119)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-rails-combining-all-betas-of-rspec-360"&gt;RSpec Rails (combining all betas of RSpec 3.6.0)&lt;/h3&gt;

&lt;h4 id="section-3"&gt;3.6.0 / 2017-05-04&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-rails/compare/v3.6.0.beta2...v3.6.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add compatibility for Rails 5.1. (Sam Phippen, Yuichiro Kaneko, #1790)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix scaffold generator so that it does not generate broken controller specs
on Rails 3.x and 4.x. (Yuji Nakayama, #1710)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta2--2016-12-12-3"&gt;3.6.0.beta2 / 2016-12-12&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-rails/compare/v3.6.0.beta1...v3.6.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improve failure output of ActiveJob matchers by listing queued jobs.
(Wojciech Wnętrzak, #1722)&lt;/li&gt;
  &lt;li&gt;Load &lt;code&gt;spec_helper.rb&lt;/code&gt; earlier in &lt;code&gt;rails_helper.rb&lt;/code&gt; by default.
(Kevin Glowacz, #1795)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta1--2016-10-09-3"&gt;3.6.0.beta1 / 2016-10-09&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-rails/compare/v3.5.2...v3.6.0.beta1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add support for &lt;code&gt;rake notes&lt;/code&gt; in Rails &lt;code&gt;&amp;gt;= 5.1&lt;/code&gt;. (John Meehan, #1661)&lt;/li&gt;
  &lt;li&gt;Remove &lt;code&gt;assigns&lt;/code&gt; and &lt;code&gt;assert_template&lt;/code&gt; from scaffold spec generators (Josh
Justice, #1689)&lt;/li&gt;
  &lt;li&gt;Add support for generating scaffolds for api app specs. (Krzysztof Zych, #1685)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-support-combining-all-betas-of-rspec-360"&gt;RSpec Support (combining all betas of RSpec 3.6.0)&lt;/h3&gt;

&lt;h4 id="section-4"&gt;3.6.0 / 2017-05-04&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-support/compare/v3.6.0.beta2...3.6.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Import &lt;code&gt;Source&lt;/code&gt; classes from rspec-core. (Yuji Nakayama, #315)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta2--2016-12-12-4"&gt;3.6.0.beta2 / 2016-12-12&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-support/compare/v3.6.0.beta1...v3.6.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No user-facing changes.&lt;/p&gt;

&lt;h4 id="beta1--2016-10-09-4"&gt;3.6.0.beta1 / 2016-10-09&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-support/compare/v3.5.0...v3.6.0.beta1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Prevent truncated formatted object output from mangling console codes. (#294, Anson Kelly)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Now in Beta: Effective Testing with RSpec 3</title>
    <link rel="alternate" href="http://rspec.info/blog/2017/02/now-in-beta-effective-testing-with-rspec-3/"/>
    <id>http://rspec.info/blog/2017/02/now-in-beta-effective-testing-with-rspec-3/</id>
    <published>2017-02-14T16:00:00-08:00</published>
    <updated>2017-09-09T21:41:52-07:00</updated>
    <author>
      <name>Myron Marston</name>
    </author>
    <content type="html">&lt;p&gt;Six years ago, &lt;a href="https://pragprog.com/book/achbd/the-rspec-book"&gt;The RSpec Book&lt;/a&gt;
introduced thousands of people to RSpec and helped them get the most out of the
framework. Since that time, RSpec has continued to evolve. RSpec 3 brought many
changes to help developers build and test better Ruby programs. The RSpec Book,
now quite out of date, does not cover these changes.  Readers have been
asking: &lt;em&gt;is there going to be a new book?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In fact, &lt;a href="https://twitter.com/undees"&gt;Ian Dees&lt;/a&gt; and I have been hard at work on
a brand new book for over two years. Ian brings with him a wealth of experience
from using RSpec since 2006. He has a keen ability to translate technical
concepts into easy-to-read, enjoyable books, such as the PragProg titles &lt;a href="https://pragprog.com/book/7lang/seven-more-languages-in-seven-weeks"&gt;Seven
More Languages in Seven
Weeks&lt;/a&gt; and
&lt;a href="https://pragprog.com/book/dhwcr/cucumber-recipes"&gt;Cucumber Recipes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I've been the lead maintainer of RSpec since 2012.  I've built many of RSpec's
notable additions in recent years, including composable matchers, the &lt;code&gt;--bisect&lt;/code&gt;
and &lt;code&gt;--only-failures&lt;/code&gt; options, and the &lt;code&gt;:aggregate_failures&lt;/code&gt; features. Together,
we've written a book we're very proud of, and we're happy to announce it is now in beta:&lt;/p&gt;

&lt;div class="rspec-3-book"&gt;
  &lt;a href="https://pragprog.com/book/rspec3/effective-testing-with-rspec-3"&gt;
    &lt;img alt="Cover image for Effective Testing with RSpec 3" class="cover-xlarge b-lazy book-cover" height="228" id="title-book-cover-rspec3" itemprop="image" src="/images/rspec3_book_beta.jpg" title="Cover image for Effective Testing with RSpec 3" width="190" /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;We've written &lt;a href="https://pragprog.com/book/rspec3/effective-testing-with-rspec-3"&gt;Effective Testing with RSpec 3: Build Ruby Apps with
Confidence&lt;/a&gt; to
be &lt;em&gt;the&lt;/em&gt; definitive guide to modern RSpec. If you're new to RSpec, it's a
perfect introduction. If you've used RSpec before, but haven't kept up with the
recent changes, this book will get you up to speed, covering new features through
the soon-to-be-released RSpec 3.6.&lt;/p&gt;

&lt;p&gt;Our book goes far beyond the RSpec documentation, walking through
building a real-world JSON API and then diving deep into each part
of RSpec. The theme of &lt;em&gt;effective testing&lt;/em&gt;–using practices to get
more &lt;em&gt;value&lt;/em&gt; out of your specs than the cost of writing them–is woven
throughout.&lt;/p&gt;

&lt;p&gt;If you're interested in the book, you can purchase the beta eBook now!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>RSpec 3.5 has been released!</title>
    <link rel="alternate" href="http://rspec.info/blog/2016/07/rspec-3-5-has-been-released/"/>
    <id>http://rspec.info/blog/2016/07/rspec-3-5-has-been-released/</id>
    <published>2016-06-30T17:00:00-07:00</published>
    <updated>2016-07-06T09:29:07-07:00</updated>
    <author>
      <name>Sam Phippen, Myron Marston and Jon Rowe</name>
    </author>
    <content type="html">&lt;p&gt;RSpec 3.5 has just been released! Given our commitment to
&lt;a href="http://semver.org/"&gt;semantic versioning&lt;/a&gt;, this should be a trivial
upgrade for anyone already using RSpec 3, but if we did introduce
any regressions, please let us know, and we'll get a patch release
out with a fix ASAP.&lt;/p&gt;

&lt;p&gt;RSpec continues to be a community-driven project with contributors
from all over the world. This release includes over 600 commits and 150
merged pull requests from over 50 different contributors!&lt;/p&gt;

&lt;p&gt;Thank you to everyone who helped make this release happen!&lt;/p&gt;

&lt;h2 id="notable-changes"&gt;Notable Changes&lt;/h2&gt;

&lt;h3 id="core-configwhenfirstmatchingexampledefined"&gt;Core: &lt;code&gt;config.when_first_matching_example_defined&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;We generally advise that you avoid putting setup logic in &lt;code&gt;spec_helper.rb&lt;/code&gt; that is
needed by only some of your specs–that way, you can minimize the boot time to
run isolated unit specs. Instead, that kind of setup logic can go in a file in
&lt;code&gt;spec/support&lt;/code&gt;. Spec files that need it can then require the support file and tag the
example group to opt-in to any associated hooks and module inclusions, e.g.:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'support/db'&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;SomeClassThatUsesTheDB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:db&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works, but it's always felt sub-optimal that both the require and the &lt;code&gt;:db&lt;/code&gt; tag
are necessary to make this work. It's duplication that happens in every spec file that
uses the DB. If I forget to put the &lt;code&gt;require 'support/db'&lt;/code&gt; line in a spec file that uses
the DB, I can get in a situation where the spec file fails when run individually, but
passes when run with the entire suite (because other spec files load the support file).&lt;/p&gt;

&lt;p&gt;RSpec 3.5 includes a new hook that works nicely in this situation. Instead of requiring
&lt;code&gt;support/db&lt;/code&gt; in each spec file that needs it, you can configure RSpec to load it if
any examples tagged with &lt;code&gt;:db&lt;/code&gt; are defined:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;when_first_matching_example_defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'support/db'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This new &lt;code&gt;when_first_matching_example_defined&lt;/code&gt; hook fires as soon as the first
example with matching metadata is defined, allowing you to configure things to
be loaded as needed based on metadata.  Of course, this new hook isn't limited to
just this use case, but it's one of the main ways we expect to see it used.&lt;/p&gt;

&lt;h3 id="core-configfilterrunwhenmatching"&gt;Core: &lt;code&gt;config.filter_run_when_matching&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;One of the common uses for RSpec's metadata system is focus filtering. Before RSpec 3.5,
you'd configure it like this:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter_run&lt;/span&gt; &lt;span class="ss"&gt;:focus&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run_all_when_everything_filtered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can tag an example or group with &lt;code&gt;:focus&lt;/code&gt; to have RSpec run just what you've tagged.
When nothing is tagged with &lt;code&gt;:focus&lt;/code&gt; you want RSpec to ignore this filter, so the
&lt;code&gt;run_all_when_everything_filtered = true&lt;/code&gt; option makes it do that.&lt;/p&gt;

&lt;p&gt;Unfortunately, &lt;code&gt;run_all_when_everything_filtered&lt;/code&gt; applies globally to &lt;em&gt;all&lt;/em&gt; filtering
(not just &lt;code&gt;:focus&lt;/code&gt; filtering), and it creates some surprising behavior in some situations.
(See &lt;a href="https://github.com/rspec/rspec-core/issues/1920"&gt;this issue&lt;/a&gt; for one example).
We realized that it would make a lot more sense to be able to setup &lt;code&gt;:focus&lt;/code&gt; as a
&lt;em&gt;conditional&lt;/em&gt; filter, so in RSpec 3.5 you can do that:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter_run_when_matching&lt;/span&gt; &lt;span class="ss"&gt;:focus&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this configuration, the &lt;code&gt;:focus&lt;/code&gt; filtering will only apply if any examples
or groups are tagged with &lt;code&gt;:focus&lt;/code&gt;. It also makes for shorter, simpler configuration!&lt;/p&gt;

&lt;h3 id="core-load-spec-files-in-order-specified-at-command-line"&gt;Core: Load spec files in order specified at command line&lt;/h3&gt;

&lt;p&gt;RSpec 3.5 now loads spec files and directories in the order of your
command line arguments. This provides a simple way to order things in a
one-off manner. For example, for a particular spec run if you want your fast
unit specs to run before your slow acceptance specs, you can run RSpec like so:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rspec spec/unit spec/acceptance --order defined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;--order defined&lt;/code&gt; bit is only needed if you've configured RSpec to normally
order things randomly (which we recommend as your default).&lt;/p&gt;

&lt;h3 id="core-shared-example-group-inclusion-changes"&gt;Core: Shared example group inclusion changes&lt;/h3&gt;

&lt;p&gt;RSpec has supported the idea of a &lt;em&gt;shared context&lt;/em&gt;–a shared example group defined
for the purpose of sharing contextual helpers and hooks–for a long time. You define
a shared context like this:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shared_context&lt;/span&gt; &lt;span class="s2"&gt;"DB support"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;MyORM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;database&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;# Wrap each example in a transaction...&lt;/span&gt;
  &lt;span class="n"&gt;around&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:rollback&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:always&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Interleave example begin/end messages in DB logs so it&lt;/span&gt;
  &lt;span class="c1"&gt;# is clear which SQL statements come from which examples.&lt;/span&gt;
  &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;info&lt;/span&gt; &lt;span class="s2"&gt;"Beginning example: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:full_description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;info&lt;/span&gt; &lt;span class="s2"&gt;"Ending example: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:full_description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use this shared context, you can explicitly include it in a group with &lt;code&gt;include_context&lt;/code&gt;:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;MyModel&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;include_context&lt;/span&gt; &lt;span class="s2"&gt;"DB support"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also supported a way of &lt;em&gt;implicitly&lt;/em&gt; including the shared context in a group using matching metadata:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shared_context&lt;/span&gt; &lt;span class="s2"&gt;"DB support"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:db&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;MyModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:db&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach worked OK, but had several significant problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The first argument to &lt;code&gt;shared_context&lt;/code&gt; (&lt;code&gt;"DB support"&lt;/code&gt;) doesn't serve a purpose
beyond labelling what the group is for (which a comment could achieve just as well).&lt;/li&gt;
  &lt;li&gt;Some users have expressed surprised that the metadata is treated "special" here and
isn't simply applied to the shared example group like it is applied to a normal example group.&lt;/li&gt;
  &lt;li&gt;It makes it impossible to attach some metadata to a shared example group that will be
automatically applied to including example groups. For example, maybe you want to temporarily
add &lt;code&gt;:skip&lt;/code&gt; or &lt;code&gt;:focus&lt;/code&gt; metadata to all including groups. There was no way to do this.&lt;/li&gt;
  &lt;li&gt;There's no obvious way to make a shared example group get auto-included in every
example group (e.g. for a global &lt;code&gt;before&lt;/code&gt; hook or a &lt;code&gt;let&lt;/code&gt; you want to make available everywhere…).&lt;/li&gt;
  &lt;li&gt;It's inconsistent with how module inclusion works (e.g. &lt;code&gt;config.include DBSupport, :db&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In RSpec 3.5 we've rectified these problems with a couple of changes.&lt;/p&gt;

&lt;h4 id="new-api-configincludecontext"&gt;New API: &lt;code&gt;config.include_context&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;You can now define shared context inclusions in your &lt;code&gt;RSpec.configure&lt;/code&gt; block:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include_context&lt;/span&gt; &lt;span class="s2"&gt;"DB support"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:db&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This aligns with the existing &lt;code&gt;config.include&lt;/code&gt; API for module inclusions, provides
a way to include shared contexts based on metadata that is less surprising, and
makes it simple to include a shared context in all example groups (just don't
pass a metadata argument).&lt;/p&gt;

&lt;h4 id="new-config-option-configsharedcontextmetadatabehavior"&gt;New config option: &lt;code&gt;config.shared_context_metadata_behavior&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;We've also added a config option that lets you determine how shared context
metadata is treated:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shared_context_metadata_behavior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:trigger_inclusion&lt;/span&gt;
  &lt;span class="c1"&gt;# or&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shared_context_metadata_behavior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:apply_to_host_groups&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The former value (&lt;code&gt;:trigger_inclusion&lt;/code&gt;) is the default and exists only for backwards
compatibility. It treats metadata passed to &lt;code&gt;RSpec.shared_context&lt;/code&gt; exactly how it was
treated in RSpec 3.4 and before: it triggers inclusion in groups with matching metadata.
We plan to remove support for it in RSpec 4.&lt;/p&gt;

&lt;p&gt;The latter value (&lt;code&gt;:apply_to_host_groups&lt;/code&gt;) opts-in to the new behavior. Instead of
triggering inclusion in groups with matching metadata, it applies the metadata to host
groups.  For example, you could focus on all groups that use the DB by tagging your
shared context:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shared_context&lt;/span&gt; &lt;span class="s2"&gt;"DB support"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:focus&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="expectations-keyword-argument-support-for-the-respondto-matcher"&gt;Expectations: Keyword argument support for the &lt;code&gt;respond_to&lt;/code&gt; matcher.&lt;/h3&gt;

&lt;p&gt;Keyword arguments have been a stable language feature for some time now but RSpec
has lacked support for placing expectations upon keyword arguments in a variety of our matchers.&lt;/p&gt;

&lt;p&gt;In rspec-expectations 3.5 we add support for checking whether an object responds to a method
using keyword arguments. You'll now be able to check a method's response signature for particular
keyword(s) as well as a count of traditional arguments.&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;respond_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:find&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with_keywords&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;respond_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:find&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;and_keywords&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We're also expanding the matchers existing capabilities, adding the ability
 to check for a range of arguments, or unlimited arguments in addition to a specific
 number. e.g:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;respond_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:build&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;arguments&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;respond_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:build&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with_unlimited_arguments&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A big thank you to Rob Smith for the work you put into making this a part of RSpec.&lt;/p&gt;

&lt;h3 id="expectations-minitest-integration-now-works-with-minitest-56"&gt;Expectations: Minitest integration now works with Minitest 5.6+&lt;/h3&gt;

&lt;p&gt;While rspec-expectations is normally used with rspec-core, you can easily use it
with other test frameworks.  We provide integration with Minitest.  Simply load
our Minitest support after loading Minitest itself:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rspec/expectations/minitest_integration'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately, Minitest 5.6 introduced its own &lt;code&gt;expect&lt;/code&gt; method which conflicted with
the &lt;code&gt;expect&lt;/code&gt; method we provide and broke this integration. There's a fix for this in
rspec-expectations 3.5.&lt;/p&gt;

&lt;h3 id="mocks-add-minitest-integration"&gt;Mocks: Add Minitest integration&lt;/h3&gt;

&lt;p&gt;While we've long provided Minitest integration for rspec-expectations, we've never
provided the same level of simple integration with rspec-mocks. Instead, users had
to integrate rspec-mocks with Minitest themselves using the lifecycle hooks we provide.
This worked pretty well until the aforementioned &lt;code&gt;expect&lt;/code&gt; method was added to Minitest 5.6
and broke things for users trying to use rspec-mocks with minitest. In rspec-mocks 3.5,
we now provide first-class support for usage with Minitest.  Just require our integration
file:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rspec/mocks/minitest_integration'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rails-support-for-rails-5"&gt;Rails: Support for Rails 5&lt;/h3&gt;

&lt;p&gt;The headline here is that RSpec 3.5.0 is compatible with Rails 5. As Rails 5
betas and release candidates have been released, we've been releasing betas of
3.5.0 to keep up alongside Rails. Due to this being a major release of Rails
some APIs that we consume have been deprecated. RSpec is not doing a major
release and so  this only gets exposed to you, our users, in one place:
controller testing.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://github.com/rails/rails/issues/18950"&gt;Rails 5&lt;/a&gt; &lt;code&gt;assigns&lt;/code&gt; and
&lt;code&gt;assert_template&lt;/code&gt; are "soft deprecated". Controller tests themselves &lt;em&gt;are not&lt;/em&gt;,
and adding &lt;code&gt;:type =&amp;gt; :controller&lt;/code&gt; to your specs is still 100% supported.
Through Rails 3 and 4 it was both prevalent and idiomatic to use &lt;code&gt;assigns&lt;/code&gt; in
controller specs. As this is a minor release of RSpec our commitment to SemVer
means that we are not going to break your existing controller specs. For
existing Rails applications that make heavy use of &lt;code&gt;assigns&lt;/code&gt; adding the
&lt;a href="https://github.com/rails/rails-controller-testing"&gt;&lt;code&gt;rails-controller-testing&lt;/code&gt;&lt;/a&gt;
to your Gemfile will restore &lt;code&gt;assigns&lt;/code&gt; and &lt;code&gt;assert_template&lt;/code&gt;. RSpec integrates
with this gem seamlessly, so your controller specs should just continue to work.&lt;/p&gt;

&lt;p&gt;For new Rails apps: we don't recommend adding the &lt;code&gt;rails-controller-testing&lt;/code&gt; gem
to your application. The official recommendation of the Rails team and the RSpec
core team is to write  &lt;a href="https://www.relishapp.com/rspec/rspec-rails/docs/request-specs/request-spec"&gt;request
specs&lt;/a&gt;
instead. Request specs allow you to focus on a single controller action, but
unlike controller tests involve the router, the middleware stack, and both rack
requests and responses. This adds realism to the test that you are writing, and
helps avoid many of the issues that are common in controller specs. In Rails 5,
request specs are significantly faster than either request or controller specs
were in rails 4, thanks to the work by &lt;a href="https://twitter.com/eileencodes?lang=en-gb"&gt;Eileen Uchitelle&lt;/a&gt;&lt;sup id="fnref:foot_1"&gt;&lt;a href="#fn:foot_1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; of the Rails Committer Team.&lt;/p&gt;

&lt;p&gt;The other important feature of Rails 5 we wanted to discuss is ActionCable.
Unfortunately RSpec is not able to provide a clean way of testing
ActionCable at this time. Rails is working on a testing type for ActionCable
slated for release as part of Rails 5.1. We'll be watching that closely and work
something up when it's ready. In the mean time, we suggest you test ActionCable
through a browser, in an integrated fashion.&lt;/p&gt;

&lt;p&gt;The work on Rails 5 represented a significant investment by a number of RSpec
Core Team members, and we received significant help from members of the Rails
Commiter and Core teams. We offer kind thanks to everyone that was involved with
making this possible.&lt;/p&gt;

&lt;h2 id="stats"&gt;Stats&lt;/h2&gt;

&lt;h3 id="combined"&gt;Combined:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 625&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 192&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;62 contributors&lt;/strong&gt;: Aaron Stone, Ahmed AbouElhamayed, Al Snow, Alex Altair,
Alexander Skiba, Alireza Bashiri, Andrew Kozin (aka nepalez), Andrew White,
Anton Rieder, Ben Saunders, Benjamin Quorning, Bradley Schaefer, Bruno Bonamin,
DarthSim, David Rodríguez, Diogo Benicá, Eliot Sykes, Fernando Seror, Gautam
Sawhney, Isaac Betesh, James Coleman, Joe Rafaniello, John Schroeder, Jon Moss,
Jon Rowe, Jun Aruga, Kilian Cirera Sant, Koen Punt, Liss McCabe, Marc Ignacio,
Martin Emde, Matt Jones, Michele Piccirillo, Miklos Fazekas, Myron Marston,
Patrik Wenger, Perry Smith, Peter Swan, Prem Sichanugrist, Rob, Rob Smith, Ryan
Beckman, Ryan Clark, Sam Phippen, Scott Bronson, Sergey Pchelintsev, Simon
Coffey, Thomas Hart II, Timo Schilling, Tobias Bühlmann, Travis Grathwell,
William Jeffries, Wojciech Wnętrzak, Xavier Shay, Yoshihiro Ashida, Yuji
Nakayama, Zshawn Syed, chrisarcand, liam-m, mrageh, sleepingkingstudios, yui-knk&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-core"&gt;rspec-core:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 194&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 66&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;18 contributors&lt;/strong&gt;: Alexander Skiba, Alireza Bashiri, Benjamin Quorning,
Bradley Schaefer, Jon Moss, Jon Rowe, Matt Jones, Michele Piccirillo, Myron
Marston, Patrik Wenger, Perry Smith, Sam Phippen, Simon Coffey, Thomas Hart II,
Travis Grathwell, Yuji Nakayama, mrageh, yui-knk&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-expectations"&gt;rspec-expectations:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 83&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 25&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;14 contributors&lt;/strong&gt;: Alex Altair, Ben Saunders, Benjamin Quorning, Bradley
Schaefer, James Coleman, Jon Rowe, Myron Marston, Rob Smith, Sam Phippen,
William Jeffries, Yuji Nakayama, Zshawn Syed, chrisarcand, sleepingkingstudios&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-mocks"&gt;rspec-mocks:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 82&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 28&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;17 contributors&lt;/strong&gt;: Andrew Kozin (aka nepalez), Benjamin Quorning, Bradley
Schaefer, Bruno Bonamin, David Rodríguez, Isaac Betesh, Joe Rafaniello, Jon
Rowe, Kilian Cirera Sant, Marc Ignacio, Martin Emde, Myron Marston, Patrik
Wenger, Ryan Beckman, Sam Phippen, Tobias Bühlmann, Yuji Nakayama&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-rails"&gt;rspec-rails:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 185&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 47&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;31 contributors&lt;/strong&gt;: Ahmed AbouElhamayed, Al Snow, Andrew White, Anton Rieder,
Benjamin Quorning, Bradley Schaefer, DarthSim, David Rodríguez, Diogo Benicá,
Eliot Sykes, Fernando Seror, Gautam Sawhney, John Schroeder, Jon Rowe, Jun
Aruga, Koen Punt, Liss McCabe, Miklos Fazekas, Myron Marston, Peter Swan, Prem
Sichanugrist, Rob, Ryan Clark, Sam Phippen, Scott Bronson, Sergey Pchelintsev,
Timo Schilling, Wojciech Wnętrzak, Xavier Shay, Yoshihiro Ashida, Yuji Nakayama&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-support"&gt;rspec-support:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 81&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 26&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;8 contributors&lt;/strong&gt;: Aaron Stone, Bradley Schaefer, Jon Rowe, Myron Marston,
Sam Phippen, Yuji Nakayama, liam-m, sleepingkingstudios&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="docs"&gt;Docs&lt;/h2&gt;

&lt;h3 id="api-docs"&gt;API Docs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="/documentation/3.5/rspec-core/"&gt;rspec-core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="/documentation/3.5/rspec-expectations/"&gt;rspec-expectations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="/documentation/3.5/rspec-mocks/"&gt;rspec-mocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="/documentation/3.5/rspec-rails/"&gt;rspec-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="cucumber-features"&gt;Cucumber Features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://relishapp.com/rspec/rspec-core"&gt;rspec-core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://relishapp.com/rspec/rspec-expectations"&gt;rspec-expectations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://relishapp.com/rspec/rspec-mocks"&gt;rspec-mocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://relishapp.com/rspec/rspec-rails"&gt;rspec-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="release-notes"&gt;Release Notes&lt;/h2&gt;

&lt;h3 id="rspec-core-combining-all-betas-of-rspec-350"&gt;RSpec Core (combining all betas of RSpec 3.5.0)&lt;/h3&gt;

&lt;h4 id="section"&gt;3.5.0 / 2016-07-01&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-core/compare/v3.5.0.beta4...v3.5.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Include any &lt;code&gt;SPEC_OPTS&lt;/code&gt; in reproduction command printed at the end of
a bisect run. (Simon Coffey, #2274)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Handle &lt;code&gt;--bisect&lt;/code&gt; in &lt;code&gt;SPEC_OPTS&lt;/code&gt; environment variable correctly so as
to avoid infinite recursion. (Simon Coffey, #2271)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta4--2016-06-05"&gt;3.5.0.beta4 / 2016-06-05&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-core/compare/v3.5.0.beta3...v3.5.0.beta4"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Filter out bundler stackframes from backtraces by default, since
Bundler 1.12 now includes its own frames in stack traces produced
by using &lt;code&gt;bundle exec&lt;/code&gt;. (Myron Marston, #2240)&lt;/li&gt;
  &lt;li&gt;HTML Formatter uses exception presenter to get failure message
for consistency with other formatters. (@mrageh, #2222)&lt;/li&gt;
  &lt;li&gt;Load spec files in the order of the directories or files passed
at the command line, making it easy to make some specs run before
others in a one-off manner.  For example, &lt;code&gt;rspec spec/unit
spec/acceptance --order defined&lt;/code&gt; will run unit specs before acceptance
specs. (Myron Marston, #2253)&lt;/li&gt;
  &lt;li&gt;Add new &lt;code&gt;config.include_context&lt;/code&gt; API for configuring global or
filtered inclusion of shared contexts in example groups.
(Myron Marston, #2256)&lt;/li&gt;
  &lt;li&gt;Add new &lt;code&gt;config.shared_context_metadata_behavior = :apply_to_host_groups&lt;/code&gt;
option, which causes shared context metadata to be inherited by the
metadata hash of all host groups and examples instead of configuring
implicit auto-inclusion based on the passed metadata. (Myron Marston, #2256)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix &lt;code&gt;--bisect&lt;/code&gt; so it works on large spec suites that were previously triggering
"Argument list too long errors" due to all the spec locations being passed as
CLI args. (Matt Jones, #2223).&lt;/li&gt;
  &lt;li&gt;Fix deprecated &lt;code&gt;:example_group&lt;/code&gt;-based filtering so that it properly
applies to matching example groups. (Myron Marston, #2234)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;NoMethodError&lt;/code&gt; caused by Java backtraces on JRuby. (Michele Piccirillo, #2244)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta3--2016-04-02"&gt;3.5.0.beta3 / 2016-04-02&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-core/compare/v3.5.0.beta2...v3.5.0.beta3"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add new &lt;code&gt;config.filter_run_when_matching&lt;/code&gt; API, intended to replace
the combination of &lt;code&gt;config.filter_run&lt;/code&gt; and
&lt;code&gt;config.run_all_when_everything_filtered&lt;/code&gt; (Myron Marston, #2206)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use the encoded string logic for source extraction. (Jon Rowe, #2183)&lt;/li&gt;
  &lt;li&gt;Fix rounding issue in duration formatting helper. (Fabersky, Jon Rowe, #2208)&lt;/li&gt;
  &lt;li&gt;Fix failure snippet extraction so that &lt;code&gt;def-end&lt;/code&gt; snippets
ending with &lt;code&gt;end&lt;/code&gt;-only line can be extracted properly.
(Yuji Nakayama, #2215)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta2--2016-03-10"&gt;3.5.0.beta2 / 2016-03-10&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-core/compare/v3.5.0.beta1...v3.5.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Remove unneeded &lt;code&gt;:execution_result&lt;/code&gt; example group metadata, saving a
bit of memory. (Myron Marston, #2172)&lt;/li&gt;
  &lt;li&gt;Apply hooks registered with &lt;code&gt;config&lt;/code&gt; to previously defined groups.
(Myron Marston, #2189)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;RSpec::Core::Configuration#reporter&lt;/code&gt; is now public API under SemVer.
(Jon Rowe, #2193)&lt;/li&gt;
  &lt;li&gt;Add new &lt;code&gt;config.when_first_matching_example_defined&lt;/code&gt; hook. (Myron
Marston, #2175)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta1--2016-02-06"&gt;3.5.0.beta1 / 2016-02-06&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-core/compare/v3.4.4...v3.5.0.beta1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code&gt;RSpec::Core::ExampleGroup.currently_executing_a_context_hook?&lt;/code&gt;,
primarily for use by rspec-rails. (Sam Phippen, #2131)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ensure &lt;code&gt;MultipleExceptionError&lt;/code&gt; does not contain a recursive reference
to itself. (Sam Phippen, #2133)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-expectations-including-all-betas-of-rspec-350"&gt;RSpec Expectations (including all betas of RSpec 3.5.0)&lt;/h3&gt;

&lt;h4 id="section-1"&gt;3.5.0 / 2016-07-01&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-expectations/compare/v3.5.0.beta4...v3.5.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No user facing changes since beta4&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id="beta4--2016-06-05-1"&gt;3.5.0.beta4 / 2016-06-05&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-expectations/compare/v3.5.0.beta3...v3.5.0.beta4"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix &lt;code&gt;include&lt;/code&gt; matcher so that it provides a valid diff for hashes. (Yuji Nakayama, #916)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta3--2016-04-02-1"&gt;3.5.0.beta3 / 2016-04-02&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-expectations/compare/v3.5.0.beta2...v3.5.0.beta3"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make &lt;code&gt;rspec/expectations/minitest_integration&lt;/code&gt; work on Minitest::Spec
5.6+. (Myron Marston, #904)&lt;/li&gt;
  &lt;li&gt;Add an alias &lt;code&gt;having_attributes&lt;/code&gt; for &lt;code&gt;have_attributes&lt;/code&gt; matcher.
(Yuji Nakayama, #905)&lt;/li&gt;
  &lt;li&gt;Improve &lt;code&gt;change&lt;/code&gt; matcher error message when block is mis-used.
(Alex Altair, #908)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta2--2016-03-10-1"&gt;3.5.0.beta2 / 2016-03-10&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-expectations/compare/v3.5.0.beta1...v3.5.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add the ability to raise an error on encountering false positives via
&lt;code&gt;RSpec::Configuration#on_potential_false_positives = :raise&lt;/code&gt;. (Jon Rowe, #900)&lt;/li&gt;
  &lt;li&gt;When using the custom matcher DSL, support new
&lt;code&gt;notify_expectation_failures: true&lt;/code&gt; option for the &lt;code&gt;match&lt;/code&gt; method to
allow expectation failures to be raised as normal instead of being
converted into a &lt;code&gt;false&lt;/code&gt; return value for &lt;code&gt;matches?&lt;/code&gt;. (Jon Rowe, #892)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Allow &lt;code&gt;should&lt;/code&gt; deprecation check to work on &lt;code&gt;BasicObject&lt;/code&gt;s. (James Coleman, #898)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta1--2016-02-06-1"&gt;3.5.0.beta1 / 2016-02-06&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-expectations/compare/v3.4.0...v3.5.0.beta1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make &lt;code&gt;match_when_negated&lt;/code&gt; in custom matcher DSL support use of
expectations within the match logic. (Chris Arcand, #789)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Return &lt;code&gt;true&lt;/code&gt; as expected from passing negated expectations
(such as &lt;code&gt;expect("foo").not_to eq "bar"&lt;/code&gt;), so they work
properly when used within a &lt;code&gt;match&lt;/code&gt; or &lt;code&gt;match_when_negated&lt;/code&gt;
block. (Chris Arcand, #789)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-mocks-including-all-betas-of-rspec-350"&gt;RSpec Mocks (including all betas of RSpec 3.5.0)&lt;/h3&gt;

&lt;h4 id="section-2"&gt;3.5.0 / 2016-07-01&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-mocks/compare/v3.5.0.beta4...v3.5.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Provides a nice string representation of
&lt;code&gt;RSpec::Mocks::MessageExpectation&lt;/code&gt; (Myron Marston, #1095)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta4--2016-06-05-2"&gt;3.5.0.beta4 / 2016-06-05&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-mocks/compare/v3.5.0.beta3...v3.5.0.beta4"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code&gt;and_throw&lt;/code&gt; to any instance handling. (Tobias Bühlmann, #1068)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta3--2016-04-02-2"&gt;3.5.0.beta3 / 2016-04-02&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-mocks/compare/v3.5.0.beta2...v3.5.0.beta3"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Issue warning when attempting to use unsupported
&lt;code&gt;allow(...).to receive(...).ordered&lt;/code&gt;. (Jon Rowe, #1000)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;rspec/mocks/minitest_integration&lt;/code&gt;, to properly integrate rspec-mocks
with minitest. (Myron Marston, #1065)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta2--2016-03-10-2"&gt;3.5.0.beta2 / 2016-03-10&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-mocks/compare/v3.5.0.beta1...v3.5.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improve error message displayed when using &lt;code&gt;and_wrap_original&lt;/code&gt; on pure test
doubles. (betesh, #1063)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix issue that prevented &lt;code&gt;receive_message_chain(...).with(...)&lt;/code&gt; working
correctly on "any instance" mocks. (Jon Rowe, #1061)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta1--2016-02-06-2"&gt;3.5.0.beta1 / 2016-02-06&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-mocks/compare/v3.4.1...v3.5.0.beta1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Allow &lt;code&gt;any_instance_of(...).to receive(...)&lt;/code&gt; to use &lt;code&gt;and_yield&lt;/code&gt; multiple
times. (Kilian Cirera Sant, #1054)&lt;/li&gt;
  &lt;li&gt;Allow matchers which inherit from &lt;code&gt;rspec-mocks&lt;/code&gt; matchers to be used for
&lt;code&gt;allow&lt;/code&gt;. (Andrew Kozin, #1056)&lt;/li&gt;
  &lt;li&gt;Prevent stubbing &lt;code&gt;respond_to?&lt;/code&gt; on partial doubles from causing infinite
recursion. (Jon Rowe, #1013)&lt;/li&gt;
  &lt;li&gt;Prevent aliased methods from disapearing after being mocked with
&lt;code&gt;any_instance&lt;/code&gt; (regression from #1043). (Joe Rafaniello, #1060)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-support-including-all-betas-of-rspec-350"&gt;RSpec Support (including all betas of RSpec 3.5.0)&lt;/h3&gt;

&lt;h4 id="section-3"&gt;3.5.0 / 2016-07-01&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-support/compare/v3.5.0.beta4...v3.5.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No user facing changes since beat4&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id="beta4--2016-06-05-3"&gt;3.5.0.beta4 / 2016-06-05&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-support/compare/v3.5.0.beta3...v3.5.0.beta4"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:
* Improve &lt;code&gt;MethodSignature&lt;/code&gt; to better support keyword arguments. (#250, Rob Smith).&lt;/p&gt;

&lt;h4 id="beta3--2016-04-02-3"&gt;3.5.0.beta3 / 2016-04-02&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-support/compare/v3.5.0.beta2...v3.5.0.beta3"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix &lt;code&gt;EncodedString&lt;/code&gt; to properly handle the behavior of &lt;code&gt;String#split&lt;/code&gt;
on JRuby when the string contains invalid bytes. (Jon Rowe, #268)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;ObjectFormatter&lt;/code&gt; so that formatting objects that don't respond to
&lt;code&gt;#inspect&lt;/code&gt; (such as &lt;code&gt;BasicObject&lt;/code&gt;) does not cause &lt;code&gt;NoMethodError&lt;/code&gt;.
(Yuji Nakayama, #269)&lt;/li&gt;
  &lt;li&gt;Fix &lt;code&gt;ObjectFormatter&lt;/code&gt; so that formatting recursive array or hash does not
cause &lt;code&gt;SystemStackError&lt;/code&gt;. (Yuji Nakayama, #270, #272)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="beta2--2016-03-10-3"&gt;3.5.0.beta2 / 2016-03-10&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-support/compare/v3.5.0.beta1...v3.5.0.beta2"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No user-facing changes.&lt;/p&gt;

&lt;h4 id="beta1--2016-02-06-3"&gt;3.5.0.beta1 / 2016-02-06&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-support/compare/v3.4.1...v3.5.0.beta1"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="footnotes"&gt;Footnotes&lt;/h2&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:foot_1"&gt;
      &lt;p&gt;See also Eileen's &lt;a href="https://www.youtube.com/watch?v=oT74HLvDo_A"&gt;talk about request spec performance&lt;/a&gt; &lt;a href="#fnref:foot_1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>RSpec 3.5.0.beta1 has been released!</title>
    <link rel="alternate" href="http://rspec.info/blog/2016/02/rspec-3-5-0-beta1-has-been-released/"/>
    <id>http://rspec.info/blog/2016/02/rspec-3-5-0-beta1-has-been-released/</id>
    <published>2016-02-05T16:00:00-08:00</published>
    <updated>2016-07-01T23:47:57-07:00</updated>
    <author>
      <name>Sam Phippen</name>
    </author>
    <content type="html">&lt;p&gt;RSpec 3.5.0.beta1 has just been released! This is a big release for us because
it's the first release of RSpec we've published that has anything that could be
described as approximating support for Rails 5.&lt;/p&gt;

&lt;p&gt;The purpose of this beta release is to enable people who are upgrading to Rails
5 to check their existing RSpec suites with Rails 5. If you do find any problems
with this release, let us know via GitHub, and we'll hopefully get everything
fixed in time for the Rails 5 release proper.&lt;/p&gt;

&lt;h2 id="upgrading-smoothly"&gt;Upgrading smoothly&lt;/h2&gt;

&lt;p&gt;As was discussed at Railsconf this year, Rails "soft deprecated" controller
tests in Rails 5. RSpec has been affected by being downstream of this, but
fortunately, we were able to make the process relatively smooth for our users.&lt;/p&gt;

&lt;p&gt;If you have existing specs with &lt;code&gt;:type =&amp;gt; :view&lt;/code&gt; or &lt;code&gt;:type =&amp;gt; :controller&lt;/code&gt;
you'll need to add &lt;a href="https://github.com/rails/rails-controller-testing"&gt;the Rails Controller Testing Gem&lt;/a&gt;
to your Gemfile. For the moment we recommend using the version from GitHub, but
we hope that there will be a stable version on Rubygems before Rails 5 is released
proper.&lt;/p&gt;

&lt;p&gt;Gemfile example:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"https://rubygems.org"&lt;/span&gt;

&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"rails-controller-testing"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:git&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/rails/rails-controller-testing"&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"rspec-rails"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"3.5.0.beta1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="summing-up"&gt;Summing up&lt;/h2&gt;

&lt;p&gt;Since this is only a beta, I've kept this blog post nice and short. When 3.5.0
final is released we'll do a full post with much more detail. In the mean time,
there are a few people I'd like to say thanks to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The entire RSpec core team for their continued work on the project&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/sgrif"&gt;Sean Griffin&lt;/a&gt;, who personally spent a lot of time helping me with fixing up
RSpec's compatability with Rails 5&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/pixeltrix"&gt;Andrew White&lt;/a&gt;, who has also been helping me with RSpec's rails integration in
the past few weeks.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/cbetta"&gt;Cristiano Betta&lt;/a&gt; who quickly smoke tested the
release against one of his rails apps for me.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This release was a huge amount of work for everyone involved, and I'm really
glad we're able to get you something to test against Rails 5 ahead of it's
release. We hope you enjoy, and do let us know if you've got any feedback on
this release.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>RSpec 3.4 has been released!</title>
    <link rel="alternate" href="http://rspec.info/blog/2015/11/rspec-3-4-has-been-released/"/>
    <id>http://rspec.info/blog/2015/11/rspec-3-4-has-been-released/</id>
    <published>2015-11-12T16:00:00-08:00</published>
    <updated>2016-07-01T23:47:57-07:00</updated>
    <author>
      <name>Myron Marston</name>
    </author>
    <content type="html">&lt;p&gt;RSpec 3.4 has just been released! Given our commitment to
&lt;a href="http://semver.org/"&gt;semantic versioning&lt;/a&gt;, this should be a trivial
upgrade for anyone already using any RSpec 3 release, but if we did introduce
any regressions, please let us know, and we'll get a patch release
out with a fix ASAP.&lt;/p&gt;

&lt;p&gt;RSpec continues to be a community-driven project with contributors
from all over the world. This release includes over 500 commits and 160
merged pull requests from nearly 50 different contributors!&lt;/p&gt;

&lt;p&gt;Thank you to everyone who helped make this release happen!&lt;/p&gt;

&lt;h2 id="notable-changes"&gt;Notable Changes&lt;/h2&gt;

&lt;h3 id="core-bisect-algorithm-improvements"&gt;Core: Bisect Algorithm Improvements&lt;/h3&gt;

&lt;p&gt;&lt;a href="/blog/2015/06/rspec-3-3-has-been-released/#core-bisect"&gt;RSpec 3.3&lt;/a&gt;
shipped with a new &lt;code&gt;--bisect&lt;/code&gt; option that identifies a minimal reproduction
command when you are tracking down the source of an ordering dependency.
The core bisection algorithm used a naive permutations approach: in
each round, first it would try one half of the examples, than the other half,
and then each combination of half of the examples, until it found a half it
could safely ignore. This generally worked OK, but had some horrible worst
case behavior. In particular, if your &lt;em&gt;multiple&lt;/em&gt; culprits were involved
in the ordering dependency, it could take many combinations to hit on one
that happened to contain both. Likewise, if the algorithm had hit the point
where more than half of the remaining examples were culprits, it would
exhaustively try every combination until none remained – which would
take a very long time.&lt;/p&gt;

&lt;p&gt;In RSpec 3.4, the bisection algorithm is &lt;em&gt;much&lt;/em&gt; more intelligent. It now
uses a recursive approach that is designed to minimize the number of
attempts needed to identify the culprits. Early feedback on the new
algorithm is quite positive: Sam Livingston-Gray reported that a &lt;a href="https://twitter.com/geeksam/status/656858995932573697"&gt;3.3 bisection
ran all night&lt;/a&gt; without
completing, but with the new algorithm &lt;a href="https://twitter.com/geeksam/status/656949626495328256"&gt;it completed in only 20
minutes!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Simon Coffey for implementing this! If you'd like to learn
more, I recommend you &lt;a href="https://github.com/rspec/rspec-core/pull/1997"&gt;check out his PR&lt;/a&gt; –
it contains some really useful diagrams explaining how the new algorithm works.&lt;/p&gt;

&lt;h3 id="core-failure-output-improvements"&gt;Core: Failure Output Improvements&lt;/h3&gt;

&lt;p&gt;Good failure output has always been a priority for RSpec, but in 3.4
it's much improved, in a few ways:&lt;/p&gt;

&lt;h4 id="multi-line-code-snippets"&gt;Multi-line Code Snippets&lt;/h4&gt;

&lt;p&gt;RSpec includes a code snippet from the expectation failure in the failure
output. Before RSpec 3.4, this generally worked OK as long as your
expectation fit on one line. If you formatted it across multiple lines, like
this:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="no"&gt;MyNamespace&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;some_long_method_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:with&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:some&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;raise_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/some error snippet/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…then the failure would just print the first line (&lt;code&gt;expect {&lt;/code&gt;)
since that's the stackframe included in the exception. In RSpec 3.4,
we now load &lt;a href="http://ruby-doc.org/stdlib-2.2.0/libdoc/ripper/rdoc/Ripper.html"&gt;Ripper&lt;/a&gt;
from the standard library if it's available in order to parse the
source and determine how many lines to include for the full expectation
expression. For a case like the snippet above, the failure output
will now include the entire expression.&lt;/p&gt;

&lt;p&gt;There's also a new config option to go wth this: &lt;code&gt;config.max_displayed_failure_line_count&lt;/code&gt;,
which defaults to 10 and sets a limit on the size of the snippet.&lt;/p&gt;

&lt;p&gt;Thanks to Yuji Nakayama for &lt;a href="https://github.com/rspec/rspec-core/pull/2083"&gt;implementing&lt;/a&gt; this!&lt;/p&gt;

&lt;h4 id="install-coderay-for-syntax-highlighting"&gt;Install &lt;code&gt;coderay&lt;/code&gt; for Syntax Highlighting&lt;/h4&gt;

&lt;p&gt;Taking this a step further, if the &lt;a href="http://coderay.rubychan.de/"&gt;&lt;code&gt;coderay&lt;/code&gt;&lt;/a&gt;
gem is available, RSpec 3.4 will use it to syntax highlight the code snippet
in your terminal. Here's an example of how that looks, using the code snippet
from above:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Failure with syntax highlighting" src="/images/blog/multiline_failure_with_syntax_highlighting.png" /&gt;&lt;/p&gt;

&lt;h4 id="better-failure-source-detection"&gt;Better Failure Source Detection&lt;/h4&gt;

&lt;p&gt;RSpec finds the failure code snippet by looking through the exception
stack trace for an appropriate frame. We could just use the top stack
frame but that's generally not what you want: when you have an expectation
failure, the top frame refers to a link in RSpec where the
&lt;code&gt;RSpec::Expectations::ExpectationNotMetError&lt;/code&gt; was raised, and you want
to see the snippet from your &lt;code&gt;expect&lt;/code&gt; call site rather than seeing
a snippet of RSpec's code. Before RSpec 3.4, our solution for this
was fairly naive: we just looked for the first
stack frame from the spec containing your current running example file.
In some situations this would display the wrong snippet
(such as when your example called a helper method
defined in a &lt;code&gt;spec/support&lt;/code&gt; file where the real failure occurred).
In others it didn't find anything and we wound up displaying
&lt;code&gt;Unable to find matching line from backtrace&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;RSpec 3.4 has much better logic for finding the source snippet: now we
look for the first frame from the &lt;code&gt;config.project_source_dirs&lt;/code&gt; (defaults to
&lt;code&gt;lib&lt;/code&gt;, &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;spec&lt;/code&gt;) and if no matching frame can be found, we fall
back to the first stack frame. You shouldn't see
&lt;code&gt;Unable to find matching line from backtrace&lt;/code&gt; anymore!&lt;/p&gt;

&lt;h3 id="expectations-better-compound-failure-messages"&gt;Expectations: Better Compound Failure Messages&lt;/h3&gt;

&lt;p&gt;Continuing with the "improved failure output" theme, rspec-expectations
3.4 provides better failure messages for compound expectations. Before,
we would combine each failure message into a single line. For example,
this expectation:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lyrics&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;start_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"There must be some kind of way out of here"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt; &lt;span class="kp"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"No reason to get excited"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…produced this hard-to-read failure:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1) All Along the Watchtower has the expected lyrics
   Failure/Error: expect(lyrics).to start_with("There must be some kind of way out of here")
     expected "I stand up next to a mountain And I chop it down with the edge of my hand" to start with "There must be some kind of way out of here" and expected "I stand up next to a mountain And I chop it down with the edge of my hand" to include "No reason to get excited"
   # ./spec/example_spec.rb:20:in `block (2 levels) in &amp;lt;top (required)&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In RSpec 3.4, we format separate each individual failure message
so it's easier to read:&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1) All Along the Watchtower has the expected lyrics
   Failure/Error:
     expect(lyrics).to start_with("There must be some kind of way out of here")
                   .and include("No reason to get excited")

        expected "I stand up next to a mountain And I chop it down with the edge of my hand" to start with "There must be some kind of way out of here"

     ...and:

        expected "I stand up next to a mountain And I chop it down with the edge of my hand" to include "No reason to get excited"
   # ./spec/example_spec.rb:20:in `block (2 levels) in &amp;lt;top (required)&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="expectations-add-withcaptures-to-match-matcher"&gt;Expectations: Add &lt;code&gt;with_captures&lt;/code&gt; to &lt;code&gt;match&lt;/code&gt; matcher&lt;/h3&gt;

&lt;p&gt;In RSpec 3.4, the &lt;code&gt;match&lt;/code&gt; matcher has gained a new ability:
you can specify regex captures. You can use the new &lt;code&gt;with_captures&lt;/code&gt;
method to specify ordered captures:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;year_regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/(\d{4})\-(\d{2})\-(\d{2})/&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year_regex&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2015-12-25"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with_captures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2015"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"12"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"25"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…or to specify named captures:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;year_regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/(?&amp;lt;year&amp;gt;\d{4})\-(?&amp;lt;month&amp;gt;\d{2})\-(?&amp;lt;day&amp;gt;\d{2})/&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year_regex&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2015-12-25"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with_captures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="ss"&gt;year: &lt;/span&gt;&lt;span class="s2"&gt;"2015"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;month: &lt;/span&gt;&lt;span class="s2"&gt;"12"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;day: &lt;/span&gt;&lt;span class="s2"&gt;"25"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to Sam Phippen and Jason Karns who collaborated on this new feature.&lt;/p&gt;

&lt;h3 id="rails-new-haveenqueuedjob-matcher-for-activejob"&gt;Rails: New &lt;code&gt;have_enqueued_job&lt;/code&gt; matcher for ActiveJob&lt;/h3&gt;

&lt;p&gt;Rails 4.2 shipped with ActiveJob, and rspec-rails 3.4 now has a matcher
that allows you to specify that a block of code enqueues a job. It
supports a fluent interface that will look familiar if you're
an rspec-mocks user:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="no"&gt;HeavyLiftingJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_later&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_enqueued_job&lt;/span&gt;

&lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="no"&gt;HelloJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_later&lt;/span&gt;
  &lt;span class="no"&gt;HeavyLiftingJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_later&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_enqueued_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;HelloJob&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;exactly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:once&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="no"&gt;HelloJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_later&lt;/span&gt;
  &lt;span class="no"&gt;HelloJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_later&lt;/span&gt;
  &lt;span class="no"&gt;HelloJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_later&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_enqueued_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;HelloJob&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;at_least&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt;

&lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="no"&gt;HelloJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_later&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_enqueued_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;HelloJob&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;at_most&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:twice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="no"&gt;HelloJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_later&lt;/span&gt;
  &lt;span class="no"&gt;HeavyLiftingJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_later&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_enqueued_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;HelloJob&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt; &lt;span class="n"&gt;have_enqueued_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;HeavyLiftingJob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="no"&gt;HelloJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;wait_until: &lt;/span&gt;&lt;span class="no"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tomorrow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;noon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;queue: &lt;/span&gt;&lt;span class="s2"&gt;"low"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;perform_later&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_enqueued_job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;on_queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"low"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tomorrow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;noon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to Wojciech Wnętrzak for implementing this feature!&lt;/p&gt;

&lt;h2 id="stats"&gt;Stats&lt;/h2&gt;

&lt;h3 id="combined"&gt;Combined:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 502&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 163&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;48 contributors&lt;/strong&gt;: Aaron Kromer, Alex Dowad, Alex Egan, Alex Pounds, Andrew Horner, Ara Hacopian, Ashley Engelund (aenw / weedySeaDragon), Ben Woosley, Bradley Schaefer, Brian John, Bryce McDonnell, Chris Zetter, Dan Kohn, Dave Marr, Dennis Günnewig, Diego Carrion, Edward Park, Gavin Miller, Jack Scotti, Jam Black, Jamela Black, Jason Karns, Jon Moss, Jon Rowe, Leo Cassarani, Liz Rush, Marek Tuchowski, Max Meyer, Myron Marston, Nikki Murray, Pavel Pravosud, Sam Phippen, Sebastián Tello, Simon Coffey, Tim Mertens, Wojciech Wnętrzak, Xavier Shay, Yuji Nakayama, Zshawn Syed, bennacer860, bootstraponline, draffensperger, georgeu2000, jackscotti, mrageh, rafik, takiy33, unmanbearpig&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-core"&gt;rspec-core:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 180&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 52&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;24 contributors&lt;/strong&gt;: Aaron Kromer, Alex Pounds, Ashley Engelund (aenw / weedySeaDragon), Ben Woosley, Bradley Schaefer, Brian John, Edward Park, Gavin Miller, Jack Scotti, Jon Moss, Jon Rowe, Leo Cassarani, Marek Tuchowski, Myron Marston, Sebastián Tello, Simon Coffey, Tim Mertens, Yuji Nakayama, bennacer860, bootstraponline, draffensperger, jackscotti, mrageh, takiy33&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-expectations"&gt;rspec-expectations:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 93&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 34&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;17 contributors&lt;/strong&gt;: Aaron Kromer, Alex Egan, Bradley Schaefer, Brian John, Dennis Günnewig, Jason Karns, Jon Moss, Jon Rowe, Max Meyer, Myron Marston, Nikki Murray, Sam Phippen, Xavier Shay, Yuji Nakayama, Zshawn Syed, mrageh, unmanbearpig&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-mocks"&gt;rspec-mocks:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 77&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 26&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;12 contributors&lt;/strong&gt;: Aaron Kromer, Alex Dowad, Alex Egan, Brian John, Bryce McDonnell, Jon Moss, Jon Rowe, Liz Rush, Myron Marston, Pavel Pravosud, Sam Phippen, georgeu2000&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-rails"&gt;rspec-rails:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 97&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 31&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;16 contributors&lt;/strong&gt;: Aaron Kromer, Alex Egan, Ara Hacopian, Bradley Schaefer, Brian John, Chris Zetter, Dan Kohn, Dave Marr, Diego Carrion, Jam Black, Jamela Black, Jon Moss, Jon Rowe, Myron Marston, Nikki Murray, Wojciech Wnętrzak&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-support"&gt;rspec-support:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Total Commits&lt;/strong&gt;: 55&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merged pull requests&lt;/strong&gt;: 20&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;10 contributors&lt;/strong&gt;: Aaron Kromer, Alex Egan, Andrew Horner, Bradley Schaefer, Brian John, Jon Rowe, Myron Marston, Xavier Shay, Yuji Nakayama, rafik&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="docs"&gt;Docs&lt;/h2&gt;

&lt;h3 id="api-docs"&gt;API Docs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="/documentation/3.4/rspec-core/"&gt;rspec-core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="/documentation/3.4/rspec-expectations/"&gt;rspec-expectations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="/documentation/3.4/rspec-mocks/"&gt;rspec-mocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="/documentation/3.4/rspec-rails/"&gt;rspec-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="cucumber-features"&gt;Cucumber Features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://relishapp.com/rspec/rspec-core"&gt;rspec-core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://relishapp.com/rspec/rspec-expectations"&gt;rspec-expectations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://relishapp.com/rspec/rspec-mocks"&gt;rspec-mocks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://relishapp.com/rspec/rspec-rails"&gt;rspec-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="release-notes"&gt;Release Notes&lt;/h2&gt;

&lt;h3 id="rspec-core-340"&gt;rspec-core 3.4.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-core/compare/v3.3.2...v3.4.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Combine multiple &lt;code&gt;--pattern&lt;/code&gt; arguments making them equivalent to
&lt;code&gt;--pattern=1,2,...,n&lt;/code&gt;. (Jon Rowe, #2002)&lt;/li&gt;
  &lt;li&gt;Improve &lt;code&gt;inspect&lt;/code&gt; and &lt;code&gt;to_s&lt;/code&gt; output for &lt;code&gt;RSpec::Core::Example&lt;/code&gt;
objects, replacing Ruby's excessively verbose output. (Gavin Miller, #1922)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;silence_filter_announcements&lt;/code&gt; configuration option.
(David Raffensperger, #2007)&lt;/li&gt;
  &lt;li&gt;Add optional &lt;code&gt;example_finished&lt;/code&gt; notification to the reporter protocol for
when you don't care about the example outcome. (Jon Rowe, #2013)&lt;/li&gt;
  &lt;li&gt;Switch &lt;code&gt;--bisect&lt;/code&gt; to a recursion-based bisection algorithm rather than
a permutation-based one. This better handles cases where an example
depends upon multiple other examples instead of just one and minimizes
the number of runs necessary to determine that an example set cannot be
minimized further. (Simon Coffey, #1997)&lt;/li&gt;
  &lt;li&gt;Allow simple filters (e.g. &lt;code&gt;:symbol&lt;/code&gt; key only) to be triggered by truthey
values. (Tim Mertens, #2035)&lt;/li&gt;
  &lt;li&gt;Remove unneeded warning about need for &lt;code&gt;ansicon&lt;/code&gt; on Windows when using
RSpec's &lt;code&gt;--color&lt;/code&gt; option. (Ashley Engelund, #2038)&lt;/li&gt;
  &lt;li&gt;Add option to configure RSpec to raise errors when issuing warnings.
(Jon Rowe, #2052)&lt;/li&gt;
  &lt;li&gt;Append the root &lt;code&gt;cause&lt;/code&gt; of a failure or error to the printed failure
output when a &lt;code&gt;cause&lt;/code&gt; is available. (Adam Magan)&lt;/li&gt;
  &lt;li&gt;Stop rescuing &lt;code&gt;NoMemoryError&lt;/code&gt;, &lt;code&gt;SignalExcepetion&lt;/code&gt;, &lt;code&gt;Interrupt&lt;/code&gt; and
&lt;code&gt;SystemExit&lt;/code&gt;. It is dangerous to interfere with these. (Myron Marston, #2063)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;config.project_source_dirs&lt;/code&gt; setting which RSpec uses to determine
if a backtrace line comes from your project source or from some
external library. It defaults to &lt;code&gt;spec&lt;/code&gt;, &lt;code&gt;lib&lt;/code&gt; and &lt;code&gt;app&lt;/code&gt; but can be
configured differently. (Myron Marston, #2088)&lt;/li&gt;
  &lt;li&gt;Improve failure line detection so that it looks for the failure line
in any project source directory instead of just in the spec file.
In addition, if no backtrace lines can be found from a project source
file, we fall back to displaying the source of the first backtrace
line. This should virtually eliminate the "Unable to find matching
line from backtrace" messages. (Myron Marston, #2088)&lt;/li&gt;
  &lt;li&gt;Add support for &lt;code&gt;:extra_failure_lines&lt;/code&gt; example metadata that will
be appended to the failure output. (bootstraponline, #2092).&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;RSpec::Core::Example#duplicate_with&lt;/code&gt; to produce new examples
with cloned metadata. (bootstraponline, #2098)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;RSpec::Core::Configuration#on_example_group_definition&lt;/code&gt; to register
hooks to be invoked when example groups are created. (bootstraponline, #2094)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;add_example&lt;/code&gt; and &lt;code&gt;remove_example&lt;/code&gt; to &lt;code&gt;RSpec::Core::ExampleGroup&lt;/code&gt; to
allow  manipulating an example groups examples. (bootstraponline, #2095)&lt;/li&gt;
  &lt;li&gt;Display multiline failure source lines in failure output when Ripper is
available (MRI &amp;gt;= 1.9.2, and JRuby &amp;gt;= 1.7.5 &amp;amp;&amp;amp; &amp;lt; 9.0.0.0.rc1).
(Yuji Nakayama, #2083)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;max_displayed_failure_line_count&lt;/code&gt; configuration option
(defaults to 10). (Yuji Nakayama, #2083)&lt;/li&gt;
  &lt;li&gt;Enhance &lt;code&gt;fail_fast&lt;/code&gt; option so it can take a number (e.g. &lt;code&gt;--fail-fast=3&lt;/code&gt;)
to force the run to abort after the specified number of failures.
(Jack Scotti, #2065)&lt;/li&gt;
  &lt;li&gt;Syntax highlight the failure snippets in text formatters when &lt;code&gt;color&lt;/code&gt;
is enabled and the &lt;code&gt;coderay&lt;/code&gt; gem is installed on a POSIX system.
(Myron Marston, #2109)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lock &lt;code&gt;example_status_persistence_file&lt;/code&gt; when reading from and writing
to it to prevent race conditions when multiple processes try to use
it. (Ben Woosley, #2029)&lt;/li&gt;
  &lt;li&gt;Fix regression in 3.3 that caused spec file names with square brackets in
them (such as &lt;code&gt;1[]_spec.rb&lt;/code&gt;) to not be loaded properly. (Myron Marston, #2041)&lt;/li&gt;
  &lt;li&gt;Fix output encoding issue caused by ASCII literal on 1.9.3 (Jon Rowe, #2072)&lt;/li&gt;
  &lt;li&gt;Fix requires in &lt;code&gt;rspec/core/rake_task.rb&lt;/code&gt; to avoid double requires
seen by some users. (Myron Marston, #2101)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-expectations-340"&gt;rspec-expectations 3.4.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-expectations/compare/v3.3.1...v3.4.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Warn when &lt;code&gt;RSpec::Matchers&lt;/code&gt; is included in a superclass after it has
already been included in a subclass on MRI 1.9, since that situation
can cause uses of &lt;code&gt;super&lt;/code&gt; to trigger infinite recursion. (Myron Marston, #816)&lt;/li&gt;
  &lt;li&gt;Stop rescuing &lt;code&gt;NoMemoryError&lt;/code&gt;, &lt;code&gt;SignalExcepetion&lt;/code&gt;, &lt;code&gt;Interrupt&lt;/code&gt; and
&lt;code&gt;SystemExit&lt;/code&gt;. It is dangerous to interfere with these. (Myron Marston, #845)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;#with_captures&lt;/code&gt; to the
&lt;a href="https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers/match-matcher"&gt;match matcher&lt;/a&gt;
which allows a user to specify expected captures when matching a regex
against a string. (Sam Phippen, #848)&lt;/li&gt;
  &lt;li&gt;Always print compound failure messages in the multi-line form. Trying
to print it all on a single line didn't read very well. (Myron Marston, #859)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix failure message from dynamic predicate matchers when the object
does not respond to the predicate so that it is inspected rather
than relying upon it's &lt;code&gt;to_s&lt;/code&gt; – that way for &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;"nil"&lt;/code&gt; is
printed rather than an empty string. (Myron Marston, #841)&lt;/li&gt;
  &lt;li&gt;Fix SystemStackError raised when diffing an Enumerable object
whose &lt;code&gt;#each&lt;/code&gt; includes the object itself. (Yuji Nakayama, #857)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-mocks-340"&gt;rspec-mocks 3.4.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-mocks/compare/v3.3.2...v3.4.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make &lt;code&gt;expect(...).to have_received&lt;/code&gt; work without relying upon
rspec-expectations. (Myron Marston, #978)&lt;/li&gt;
  &lt;li&gt;Add option for failing tests when expectations are set on &lt;code&gt;nil&lt;/code&gt;.
(Liz Rush, #983)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix &lt;code&gt;have_received { ... }&lt;/code&gt; so that any block passed when the message
was received is forwarded to the &lt;code&gt;have_received&lt;/code&gt; block. (Myron Marston, #1006)&lt;/li&gt;
  &lt;li&gt;Fix infinite loop in error generator when stubbing &lt;code&gt;respond_to?&lt;/code&gt;.
(Alex Dowad, #1022)&lt;/li&gt;
  &lt;li&gt;Fix issue with using &lt;code&gt;receive&lt;/code&gt; on subclasses (at a class level) with 1.8.7.
(Alex Dowad, #1026)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-rails-340"&gt;rspec-rails 3.4.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-rails/compare/v3.3.3...v3.4.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improved the failure message for &lt;code&gt;have_rendered&lt;/code&gt; matcher on a redirect
response. (Alex Egan, #1440)&lt;/li&gt;
  &lt;li&gt;Add configuration option to filter out Rails gems from backtraces.
(Bradley Schaefer, #1458)&lt;/li&gt;
  &lt;li&gt;Enable resolver cache for view specs for a large speed improvement
(Chris Zetter, #1452)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;have_enqueued_job&lt;/code&gt; matcher for checking if a block has queued jobs.
(Wojciech Wnętrzak, #1464)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix another load order issued which causes an undefined method &lt;code&gt;fixture_path&lt;/code&gt; error
when loading rspec-rails after a spec has been created. (Nikki Murray, #1430)&lt;/li&gt;
  &lt;li&gt;Removed incorrect surrounding whitespace in the rspec-rails backtrace
exclusion pattern for its own &lt;code&gt;lib&lt;/code&gt; code. (Jam Black, #1439)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="rspec-support-340"&gt;rspec-support 3.4.0&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://github.com/rspec/rspec-support/compare/v3.3.0...v3.4.0"&gt;Full Changelog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhancements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improve formatting of &lt;code&gt;Delegator&lt;/code&gt; based objects (e.g. &lt;code&gt;SimpleDelgator&lt;/code&gt;) in
failure messages and diffs. (Andrew Horner, #215)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;ComparableVersion&lt;/code&gt;. (Yuji Nakayama, #245)&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;Ripper&lt;/code&gt; support detection. (Yuji Nakayama, #245)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug Fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Work around bug in JRuby that reports that &lt;code&gt;attr_writer&lt;/code&gt; methods
have no parameters, causing RSpec's verifying doubles to wrongly
fail when mocking or stubbing a writer method on JRuby. (Myron Marston, #225)&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
</feed>
